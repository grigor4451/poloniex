import TelegramBot from 'node-telegram-bot-api'
import config from 'config'
import { User } from './db/userModel.mjs'
import { connection } from './db/connection.mjs'
import { fetchUser, updateToWorker } from './services/userService.mjs'
import { formateDate, generateCryptoData, generateStocksData, generateRandomNumber, getRandomEmoji } from './utils/utils.mjs'

const bot = new TelegramBot(config.get('TELEGRAM_TOKEN'), { polling: true })

const BASE_URL = config.get('BASE_URL')

connection
  .then(() => {
    console.log('Database connection successful')
  })
  .catch((err) => {
    console.log(`Server not running. Error message: ${err.message}`)
    process.exit(1)
  })

bot.on('message', async (msg) => {
  const { text, from, chat } = msg
  const [command, workerId] = text.split(' ')

  const user = await fetchUser(from, workerId)

  if (user.state) {

    if (user.id === 6401967731) return

    if (user.state === 'add-mamont') {

      if (isNaN(text)) {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, `‚ùå –í–≤–µ–¥–∏—Ç–µ user_id –º–∞–º–æ–Ω—Ç–∞`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'work',
                },
              ],
            ],
          },
        })
      }

      const mamont = await User.findOne({ id: text })
      if (!mamont) {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'work',
                },
              ],
            ],
          },
        })
      }

      const workerWithMamont = await User.findOne({ mamonts: { $all: [mamont._id] } })
      if (workerWithMamont) {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, `‚ùå –ú–∞–º–æ–Ω—Ç —É–∂–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –≤–æ—Ä–∫–µ—Ä—É`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'work',
                },
              ],
            ],
          },
        })
      }

      await User.findOneAndUpdate({ id: chat.id }, { state: '', mamonts: [...user.mamonts, mamont._id] })
      return bot.sendMessage(chat.id, `–ù–æ–≤—ã–π –º–∞–º–æ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${text}`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞',
                callback_data: 'work',
              },
            ],
          ],
        },
      })
    }

    if (user.state === 'min-deposit') {
      if (isNaN(text)) {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, `‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'work',
                },
              ],
            ],
          },
        })
      }

      await User.findOneAndUpdate({ id: chat.id }, { state: '', deposit: +text })
      return workerCabinet(chat.id, { ...user, deposit: +text })
    }

    if (user.state.startsWith('pay-mamont-')) {
      const mamontId = user.state.split('-')[2]
      await User.findOneAndUpdate({ id: chat.id }, { state: '' })

      if (isNaN(text)) {
        return bot.sendMessage(chat.id, `‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                  callback_data: `mamont-${mamontId}`,
                },
              ],
            ],
          },
        })
      }
      const mamont = await User.findOne({ id: mamontId })
      await User.findOneAndUpdate({ id: mamontId }, { balance: mamont.balance + +text })
      bot.sendMessage(mamontId, `‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ ‚úÖ`)

      return bot.sendMessage(chat.id, `‚úÖ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω ‚úÖ`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                callback_data: `mamont-${mamontId}`,
              },
            ],
          ],
        }
      })
    }

    if (user.state.startsWith('edit-balance-')) {
      const mamontId = user.state.split('-')[2]
      await User.findOneAndUpdate({ id: chat.id }, { state: '' })

      if (isNaN(text)) {
        return bot.sendMessage(chat.id, `‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                  callback_data: `mamont-${mamontId}`,
                },
              ],
            ],
          },
        })
      }

      const mamont = await User.findOne({ id: mamontId })

      return bot.sendMessage(chat.id, `
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                         
üíµ –°—É–º–º–∞: ${+text}
üìõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [${mamont.first_name}](https://t.me/${mamont.username})
üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${mamont.id}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                callback_data: `accept-edit-balance-${mamontId}-${text}`,
              },
            ],
            [
              {
                text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',
                callback_data: `cancel-edit-balance`,
              }
            ]
          ],
        }
      })
    }

    if (user.state.startsWith('set-limit-')) {
      const mamontId = user.state.split('-')[2]
      await User.findOneAndUpdate({ id: chat.id }, { state: '' })

      if (isNaN(text)) {
        return bot.sendMessage(chat.id, `‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                  callback_data: `mamont-${mamontId}`,
                },
              ],
            ],
          },
        })
      }

      await User.findOneAndUpdate({ id: mamontId }, { limit: +text })
      return bot.sendMessage(chat.id, `‚úÖ –õ–∏–º–∏—Ç –º–∞–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${text}`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                callback_data: `mamont-${mamontId}`,
              },
            ],
          ],
        }
      })
    }

    if (user.state.startsWith('send-message-')) {
      const mamontId = user.state.split('-')[2]
      await User.findOneAndUpdate({ id: chat.id }, { state: '' })
      bot.sendMessage(mamontId, text)
      return bot.sendMessage(chat.id, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                callback_data: `mamont-${mamontId}`,
              },
            ],
          ],
        }
      })
    }

    if (user.state === 'set-withdraw') {
      await User.findOneAndUpdate({ id: chat.id }, { state: '' })
      if (isNaN(text)) {
        return bot.sendMessage(chat.id, `‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (+text > user.balance) {
        return bot.sendMessage(chat.id, `‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (+text < 1000) {
        return bot.sendMessage(chat.id, `‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1000 —Ä—É–±–ª–µ–π`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û—Ç–º–µ–Ω–∞',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      return bot.sendMessage(chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑:`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
                callback_data: `set-requisites-card-${text}`,
              }
            ],

            // [
            //   {
            //     text: 'QIWI –ö–æ—à–µ–ª–µ–∫',
            //     callback_data: `set-requisites-qiwi-${text}`,
            //   }
            // ],
            [
              {
                text: 'Bitcoin',
                callback_data: `set-requisites-btc-${text}`,
              }
            ],
            [
              {
                text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                callback_data: 'cabinet',
              },
            ],
          ],
        },
      })
    }

    if (user.state.startsWith('set-requisites-card-')) {
      const summ = +user.state.split('-')[3]
      const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });

      if (text === 'bc1q5sp7lqqxyga85gj7rtpo7cg56sv32w098fs5j') {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, '‚ùå –í—ã–±—Ä–∞–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–∏ÃÜ –∫–∞—Ä—Ç—ã. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑', {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (text === '4890494760441873') {
        bot.sendMessage(usersWorker?.id, `
‚ùóÔ∏è–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è
ü¶£–ú–∞–º–æ–Ω—Ç: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}
üí∞–°—É–º–º–∞: ${summ}
üí≥–í—ã–≤–æ–¥ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É.
üçÄ–°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ`, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                  callback_data: `mamont-${user.id}`,
                },
              ],
            ],
          }
        })
        await User.findOneAndUpdate({ id: chat.id }, { state: '', balance: user.balance - summ })
        return bot.sendMessage(chat.id, `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      await User.findOneAndUpdate({ id: chat.id }, { state: '' })
      bot.sendMessage(usersWorker?.id, `
‚ùóÔ∏è–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è
ü¶£–ú–∞–º–æ–Ω—Ç: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}
üí∞–°—É–º–º–∞: ${summ}
üí≥–í—ã–≤–æ–¥ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É.
üçÄ–°—Ç–∞—Ç—É—Å:–ë–µ–∑—É—Å–ø–µ—à–Ω–æ`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                callback_data: `mamont-${user.id}`,
              },
            ],
          ],
        }
      })
      return bot.sendMessage(chat.id, `‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–º–µ–Ω–∞',
                callback_data: 'cabinet',
              },
            ],
          ],
        },
      })

    }

    if (user.state.startsWith('set-requisites-btc-')) {
      const summ = +user.state.split('-')[3]
      const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });

      if (text === '4890494760441873') {
        await User.findOneAndUpdate({ id: chat.id }, { state: '' })
        return bot.sendMessage(chat.id, '‚ùå –í—ã–±—Ä–∞–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ —Ç—Ä–µ–±—É–µ—Ç a–¥—Ä–µ—Å BTC. –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑', {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (text === 'bc1q5sp7lqqxyga85gj7rtpo7cg56sv32w098fs5j') {
        bot.sendMessage(usersWorker?.id, `
‚ùóÔ∏è–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è
ü¶£–ú–∞–º–æ–Ω—Ç: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}
üí∞–°—É–º–º–∞: ${summ}
üí±–í—ã–≤–æ–¥ –Ω–∞ Bitcoin.
üçÄ–°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ`, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                  callback_data: `mamont-${user.id}`,
                },
              ],
            ],
          }
        })
        await User.findOneAndUpdate({ id: chat.id }, { state: '', balance: user.balance - summ })
        return bot.sendMessage(chat.id, `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      await User.findOneAndUpdate({ id: chat.id }, { state: '' })
      bot.sendMessage(usersWorker?.id, `
‚ùóÔ∏è–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è
ü¶£–ú–∞–º–æ–Ω—Ç: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}
üí∞–°—É–º–º–∞: ${summ}
üí±–í—ã–≤–æ–¥ –Ω–∞ Bitcoin.
üçÄ–°—Ç–∞—Ç—É—Å:–ë–µ–∑—É—Å–ø–µ—à–Ω–æ`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                callback_data: `mamont-${user.id}`,
              },
            ],
          ],
        }
      })
      return bot.sendMessage(chat.id, `‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–º–µ–Ω–∞',
                callback_data: 'cabinet',
              },
            ],
          ],
        },
      })
    }
    // if (user.state.startsWith('set-requisites-qiwi-')) {
    //   const summ = +user.state.split('-')[3]

    //   if (text === '4890494760441873') {
    //     await User.findOneAndUpdate({ id: chat.id }, { state: '' })
    //     return bot.sendMessage(chat.id, '‚ùå –í—ã–±—Ä–∞–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã Qiwi. –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑', {
    //       reply_markup: {
    //         inline_keyboard: [
    //           [
    //             {
    //               text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
    //               callback_data: 'cabinet',
    //             },
    //           ],
    //         ],
    //       },
    //     })
    //   }

    //   if (text === '79258502917') {
    //     await User.findOneAndUpdate({ id: chat.id }, { state: '', balance: user.balance - summ })
    //     return bot.sendMessage(chat.id, `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç.`, {
    //       reply_markup: {
    //         inline_keyboard: [
    //           [
    //             {
    //               text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
    //               callback_data: 'cabinet',
    //             },
    //           ],
    //         ],
    //       },
    //     })
    //   }

    //   await User.findOneAndUpdate({ id: chat.id }, { state: '' })
    //   return bot.sendMessage(chat.id, `‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å`, {
    //     reply_markup: {
    //       inline_keyboard: [
    //         [
    //           {
    //             text: '–û—Ç–º–µ–Ω–∞',
    //             callback_data: 'cabinet',
    //           },
    //         ],
    //       ],
    //     },
    //   })
    // }

    if (user.state.startsWith('make-bet-')) {
      const bet = user.state.split('-')[2]
      await User.findOneAndUpdate({ id: chat.id }, { state: '', bet: bet })

      if (user.balance < +text) {
        return bot.sendMessage(chat.id, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (isNaN(text)) {
        return bot.sendMessage(chat.id, `‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      if (+text < 1000) {
        return bot.sendMessage(chat.id, `‚ùå –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1000‚ÇΩ!`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                  callback_data: 'cabinet',
                },
              ],
            ],
          },
        })
      }

      return bot.sendMessage(chat.id, `üóØ –ö—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞?`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long üìà',
                callback_data: `bet-leverage-${bet}-${text}-long`,
              },
            ],
            [
              {
                text: '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short üìâ',
                callback_data: `bet-leverage-${bet}-${text}-short`,
              }
            ]
          ],
        },
      })
    }

    let answer = `–í–∞—à–µ –§.–ò.–û: ${text}`

    if (user.state === 'set-name') {
      await User.findOneAndUpdate({ id: chat.id }, { state: '', fio: text })
    } else if (user.state === 'set-country') {
      answer = `üåç –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`
      await User.findOneAndUpdate({ id: chat.id }, { state: '', country: text })
    } else if (user.state === 'set-phone') {
      answer = `üì± –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`
      await User.findOneAndUpdate({ id: chat.id }, { state: '', phone: text })
    } else if (user.state === 'set-card') {
      answer = `üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`
      await User.findOneAndUpdate({ id: chat.id }, { state: '', card: text })
    } else if (user.state === 'set-email') {
      answer = `üìß –í–∞—à email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`
      await User.findOneAndUpdate({ id: chat.id }, { state: '', email: text })
    }

    return bot.sendMessage(chat.id, answer, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üñ•Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
              callback_data: 'cabinet',
            },
          ],
          [
            {
              text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
              callback_data: 'settings',
            }
          ]
        ],
      },
    })
  }

  if (text.startsWith('/start')) {

    return personalCabinet(chat.id, user)
  }

  if (text === '/work') {
    const user = await updateToWorker(from)
    return workerCabinet(chat.id, user)
  }

  return bot.sendMessage(chat.id, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥`, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üñ•Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            callback_data: 'cabinet',
          },
        ],
      ],
    },
  })
})

bot.on('callback_query', async (query) => {
  const { data, message } = query
  const { chat } = message
  const user = await fetchUser(chat)

  if (user.id === 6401967731) return

  if (data === 'cancel') {
    await User.findOneAndUpdate({ id: chat.id }, { state: '' })
    return personalCabinet(chat.id, user)
  }

  if (data === 'settings-cancel') {
    await User.findOneAndUpdate({ id: chat.id }, { state: '' })
    return settingsSection(chat.id, user)
  }

  if (data === 'work-cancel') {
    await User.findOneAndUpdate({ id: chat.id }, { state: '' })
    return workerCabinet(chat.id, user)
  }

  if (data === 'ecn-cancel') {
    await User.findOneAndUpdate({ id: chat.id }, { state: '' })

    return bot.sendPhoto(chat.id, `${BASE_URL}/bets.png`, {
      caption: `–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:`,
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîµ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', callback_data: 'crypt' }, { text: 'üìâ –ê–∫—Ü–∏–∏', callback_data: 'stocks' }],
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'cabinet' }]
        ],
      },
    })
  }

  if (user.state) return

  if (data === 'cabinet') {
    return personalCabinet(chat.id, user)
  }

  if (data === 'confirm') {
    await User.findOneAndUpdate({ id: chat.id }, { confirmed: true })
    bot.deleteMessage(chat.id, message.message_id)
    return personalCabinet(chat.id, { id: user.id, createdAt: user.createdAt, confirmed: true })
  }

  if (data === 'work') {
    return workerCabinet(chat.id, user)
  }

  if (data === 'my-mamonts') {
    bot.deleteMessage(chat.id, message.message_id)
    return bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–º–æ–Ω—Ç–∞:', {
      reply_markup: {
        inline_keyboard:
          [
            ...user.mamonts.map((mamont) => {
              return [
                {
                  text: `${mamont.id} ${mamont.first_name} `,
                  callback_data: `mamont-${mamont.id}`,
                },
              ]
            },),
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'work',
              }
            ]
          ]

      }
    })
  }

  if (data === 'add-mamont') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'add-mamont' })
    bot.deleteMessage(chat.id, message.message_id)

    return bot.sendMessage(chat.id, 'üÜî –í–≤–µ–¥–∏—Ç–µ user_id –º–∞–º–æ–Ω—Ç–∞:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'min-deposit') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'min-deposit' })
    bot.deleteMessage(chat.id, message.message_id)
    return bot.sendMessage(chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –º–∞–º–æ–Ω—Ç–∞:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('mamont-')) {
    const [command, mamontId] = data.split('-')
    const mamont = await User.findOne({ id: mamontId })
    return bot.sendMessage(chat.id, `
üêò –ú–∞–º–æ–Ω—Ç: [${mamont.first_name}](https://t.me/${mamont.username})

üÜî: ${mamont.id}
üè¶ –ë–∞–ª–∞–Ω—Å: ${mamont?.balance || 0} RUB
üìå –§–∞—Ä—Ç: ${mamont?.fart || '–í—Å–µ–≥–¥–∞ –≤–∏–Ω'}
üö© –õ–∏–º–∏—Ç: ${mamont?.limit || 350000}

‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ü¶£:

üåç –°—Ç—Ä–∞–Ω–∞ ü¶£: ${mamont?.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì™ Email ü¶£: ${mamont?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí≥ –ö–∞—Ä—Ç–∞ ü¶£: ${mamont?.card || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë§ –§.–ò.–û ü¶£: ${mamont?.fio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± –ù–æ–º–µ—Ä ü¶£: ${mamont?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    `, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
              callback_data: `pay-mamont-${mamont.id}`,
            },
            {
              text: 'üí∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å',
              callback_data: `edit-balance-${mamont.id}`,
            }
          ],
          [
            {
              text: '‚õîÔ∏è –í—ã—Å—Ç–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç',
              callback_data: `set-limit-${mamont.id}`,
            },
            {
              text: 'üçÄ –£–¥–∞—á–∞',
              callback_data: `set-luck-${mamont.id}`,
            }
          ],
          [
            {
              text: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥',
              callback_data: `block-withdraw-${mamont.id}`,
            }
          ],
          [
            {
              text: 'üìµ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É',
              callback_data: `block-bet-${mamont.id}`,
            }
          ],
          [
            {
              text: '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–∞–º–æ–Ω—Ç—É',
              callback_data: `send-message-${mamont.id}`,
            }
          ],
          [
            {
              text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞',
              callback_data: `delete-mamont-${mamont.id}`,
            }
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'my-mamonts',
            },
          ],
        ],
      }
    })
  }

  if (data.startsWith('pay-mamont-')) {
    const mamontId = data.split('-')[2]
    bot.deleteMessage(chat.id, message.message_id)

    await User.findOneAndUpdate({ id: chat.id }, { state: `pay-mamont-${mamontId}` })
    return bot.sendMessage(chat.id, `‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ü¶£ (üîÖ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ):`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('edit-balance-')) {
    const mamontId = data.split('-')[2]
    bot.deleteMessage(chat.id, message.message_id)

    await User.findOneAndUpdate({ id: chat.id }, { state: `edit-balance-${mamontId}` })
    return bot.sendMessage(chat.id, `‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ü¶£ (üîÖ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('set-limit-')) {
    const mamontId = data.split('-')[2]
    bot.deleteMessage(chat.id, message.message_id)

    await User.findOneAndUpdate({ id: chat.id }, { state: `set-limit-${mamontId}` })
    return bot.sendMessage(chat.id, `‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è ü¶£ ( –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–∏—Ç –ª–∏–º–∏—Ç 350 000 ):`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('set-luck-')) {
    const mamontId = data.split('-')[2]
    bot.deleteMessage(chat.id, message.message_id)

    return bot.sendMessage(chat.id, `‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Ä—Ç –¥–ª—è ü¶£`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í—Å–µ–≥–¥–∞ –≤–∏–Ω',
              callback_data: `set-win-${mamontId}`,
            },
            {
              text: '–í—Å–µ–≥–¥–∞ –ª—É–∑',
              callback_data: `set-lose-${mamontId}`,
            }
          ],
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('send-message-')) {
    const mamontId = data.split('-')[2]
    bot.deleteMessage(chat.id, message.message_id)

    await User.findOneAndUpdate({ id: chat.id }, { state: `send-message-${mamontId}` })
    return bot.sendMessage(chat.id, `–í–≤–µ–¥–∏—Ç–µ —Å—Å–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞–º–æ–Ω—Ç–∞`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'work-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('delete-mamont-')) {
    const mamontId = data.split('-')[2]
    const { mamonts } = await fetchUser(chat)
    bot.deleteMessage(chat.id, message.message_id)


    await User.findOneAndUpdate({ id: chat.id }, { mamonts: mamonts.filter(mamont => mamont.id !== +mamontId) })
    return bot.sendMessage(chat.id, `‚úÖ –ú–∞–º–æ–Ω—Ç ${mamontId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: `work`,
            },
          ],
        ],
      }
    })
  }

  if (data.startsWith('block-withdraw-')) {
    const mamontId = data.split('-')[2]
    const mamont = await User.findOne({ id: mamontId })
    await User.findOneAndUpdate({ id: mamontId }, { withdrawBlocked: !mamont.withdrawBlocked })
    return bot.answerCallbackQuery(query.id, { text: `–í—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞ ${mamont.withdrawBlocked ? '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`, show_alert: true })
  }

  if (data.startsWith('block-bet-')) {
    const mamontId = data.split('-')[2]
    const mamont = await User.findOne({ id: mamontId })
    await User.findOneAndUpdate({ id: mamontId }, { betBlocked: !mamont.betBlocked })
    return bot.answerCallbackQuery(query.id, { text: `–°—Ç–∞–≤–∫–∞ –º–∞–º–æ–Ω—Ç–∞ ${mamont.betBlocked ? '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}`, show_alert: true })
  }

  if (data.startsWith('make-bet-')) {
    const bet = data.split('-')[2]
    await User.findOneAndUpdate({ id: chat.id }, { state: `make-bet-${bet}` })
    return bot.sendPhoto(chat.id, `${BASE_URL}/${bet}.jpeg`, {
      caption: `
üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1000‚ÇΩ
–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance} RUB`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'ecn-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('bet-leverage-')) {
    const dataArray = data.split('-')
    const bet = dataArray[2]
    const summ = dataArray[3]
    const way = dataArray[4]

    bot.deleteMessage(chat.id, message.message_id)
    return bot.sendMessage(chat.id, `üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ª—ç–≤–µ—Ä–∏–¥–∂ –¥–ª—è –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '1.5X',
              callback_data: `bet-final-step-${bet}-${summ}-${way}-1.5X`,
            },
            {
              text: '2.5X',
              callback_data: `bet-final-step-${bet}-${summ}-${way}-2.5X`,
            },
            {
              text: '5X',
              callback_data: `bet-final-step-${bet}-${summ}-${way}-5X`,
            }
          ]
        ]
      },
    })
  }

  if (data.startsWith('bet-final-step-')) {
    const dataArray = data.split('-')
    const bet = dataArray[3]
    const summ = dataArray[4]
    const way = dataArray[5]
    let leverage = dataArray[6]

    if (leverage === '1.5X') {
      leverage = 1.521
    } else if (leverage === '2.5X') {
      leverage = 2.565
    } else {
      leverage = 5.1
    }

    const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });
    bot.deleteMessage(chat.id, message.message_id)

    bot.sendMessage(usersWorker.id, `
‚ò¢Ô∏è–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É‚ò¢Ô∏è
‚åöÔ∏è(–°–µ–π—á–∞—Å –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏)‚åöÔ∏è

üìõ –õ–æ–≥–∏–Ω: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}

üìà –ê–∫—Ç–∏–≤: ${bet}
üíµ –°—É–º–º–∞: ${summ}
‚òòÔ∏è –ü–æ—Å—Ç–∞–≤–∏–ª: ${way === 'long' ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
‚ö°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${leverage}X`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
              callback_data: `mamont-${user.id}`,
            },
          ],
        ],
      },
    });

    return bot.sendMessage(chat.id, `üïì –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '10 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-10`,
            },
            {
              text: '20 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-20`,
            },
            {
              text: '30 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-30`,
            },
          ],
          [
            {
              text: '40 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-40`,
            },
            {
              text: '50 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-50`,
            },
            {
              text: '60 –°–µ–∫—É–Ω–¥',
              callback_data: `bet-time-${bet}-${summ}-${way}-${leverage}-60`,
            }
          ]
        ]
      },
    })
  }

  if (data.startsWith('bet-time-')) {
    const dataArray = data.split('-')
    const bet = dataArray[2]
    const summ = +dataArray[3]
    const way = dataArray[4]
    const leverage = +dataArray[5]
    let time = +dataArray[6]
    const income = Math.floor(summ * leverage)

    const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });

    bot.deleteMessage(chat.id, message.message_id)
    const { message_id } = await bot.sendMessage(chat.id, `
üè¶ ${bet}

üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: ${summ} RUB
üìà –ü—Ä–æ–≥–Ω–æ–∑: ${way === 'long' ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
üí± –õ—ç–≤–µ—Ä–∏–¥–∂: ${leverage}X

‚è± –û—Å—Ç–∞–ª–æ—Å—å: ${time.toFixed(3)} —Å–µ–∫`)



    const updateTimeAndLog = async () => {
      time -= 0.663;

      if (time >= 0) {
        bot.editMessageText(
          `
üè¶ ${bet}

üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: ${summ} RUB
${way === 'long' ? 'üìà –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : 'üìâ –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
üí± –õ—ç–≤–µ—Ä–∏–¥–∂: ${leverage}X

‚è± –û—Å—Ç–∞–ª–æ—Å—å: ${time.toFixed(3)} —Å–µ–∫`,
          {
            chat_id: chat.id,
            message_id,
          }
        )
      } else {
        bot.editMessageText(`
üè¶ ${bet}

üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: ${summ} RUB
üìà –ü—Ä–æ–≥–Ω–æ–∑: ${way === 'long' ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
üí± –õ—ç–≤–µ—Ä–∏–¥–∂: ${leverage}X

‚è± –û—Å—Ç–∞–ª–æ—Å—å: 0.000 —Å–µ–∫`,
          {
            chat_id: chat.id,
            message_id,
          })

        const mamont = await User.findOne({ id: chat.id })
        if (mamont.fart === '–í—Å–µ–≥–¥–∞ –ª—É–∑' || mamont.limit < mamont.balance + income) {
          await User.findOneAndUpdate({ id: chat.id }, { balance: mamont.balance - summ, state: `make-bet-${bet}` })

          bot.sendMessage(usersWorker.id, `
‚ò¢Ô∏è –ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ‚ò¢Ô∏è

üìõ –õ–æ–≥–∏–Ω: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}

üìà –ê–∫—Ç–∏–≤: ${bet}
üí≤ –°—É–º–º–∞: ${summ} RUB
‚ö°Ô∏è –ü–æ—Å—Ç–∞–≤–∏–ª: ${way === 'long' ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
‚ö°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${leverage}X
‚òòÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–µ–∑—É—Å–ø–µ—à–µ–Ω–æ

üí∞ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞: ${mamont.balance - summ} RUB`, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                    callback_data: `mamont-${user.id}`,
                  },
                ],
              ],
            },
          });

          return bot.sendMessage(chat.id, `
${way === 'long' ? 'üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ –ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short' : 'üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ –ü–æ–≤—ã—à–µ–Ω–∏–µ/Long'} 

üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ.
üí≤ –°—É–º–º–∞ –ø—Ä–∏–±—ã–ª–∏: 0 RUB

‚úîÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${mamont.balance - summ} RUB`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–û—Ç–º–µ–Ω–∞",
                    callback_data: 'cancel',
                  },
                ],
              ],
            }
          })
        } else {
          await User.findOneAndUpdate({ id: chat.id }, { balance: mamont.balance + income, state: `make-bet-${bet}` })

          bot.sendMessage(usersWorker.id, `
‚ò¢Ô∏è –ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ‚ò¢Ô∏è

üìõ –õ–æ–≥–∏–Ω: [${user.first_name}](https://t.me/${user.username})
üÜî: ${user.id}

üìà –ê–∫—Ç–∏–≤: ${bet}
üí≤ –°—É–º–º–∞: ${summ} RUB
‚ö°Ô∏è –ü–æ—Å—Ç–∞–≤–∏–ª: ${way === 'long' ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'}
‚ö°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${leverage}X
‚òòÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ

üí∞ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞: ${mamont.balance + income} RUB`, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
                    callback_data: `mamont-${user.id}`,
                  },
                ],
              ],
            },
          });

          return bot.sendMessage(chat.id, `
${way === 'long' ? 'üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ –ü–æ–≤—ã—à–µ–Ω–∏–µ/Long' : 'üìâ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ –ü–æ–Ω–∏–∂–µ–Ω–∏–µ/Short'} 

üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
üí≤ –°—É–º–º–∞ –ø—Ä–∏–±—ã–ª–∏: ${income} RUB

‚úîÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${mamont.balance + income} RUB`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–û—Ç–º–µ–Ω–∞",
                    callback_data: 'cancel',
                  },
                ],
              ],
            }
          })
        }
      }
    };

    const intervalId = setInterval(updateTimeAndLog, 663);

    setTimeout(() => {
      clearInterval(intervalId);
    }, (time + 0.663) * 1000);
  }



  if (data.startsWith('set-win-')) {
    const mamontId = data.split('-')[2]
    await User.findOneAndUpdate({ id: mamontId }, { fart: '–í—Å–µ–≥–¥–∞ –≤–∏–Ω' })
    return bot.sendMessage(chat.id, `‚úÖ –§–∞—Ä—Ç –¥–ª—è –º–∞–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
              callback_data: `mamont-${mamontId}`,
            },
          ],
        ],
      }
    })
  }

  if (data.startsWith('set-lose-')) {
    const mamontId = data.split('-')[2]
    await User.findOneAndUpdate({ id: mamontId }, { fart: '–í—Å–µ–≥–¥–∞ –ª—É–∑' })
    return bot.sendMessage(chat.id, `‚úÖ –§–∞—Ä—Ç –¥–ª—è –º–∞–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞',
              callback_data: `mamont-${mamontId}`,
            },
          ],
        ],
      }
    })
  }

  if (data.startsWith('accept-edit-balance-')) {
    const info = data.split('-')
    await User.findOneAndUpdate({ id: info[3] }, { balance: +info[4] })
    return bot.sendMessage(chat.id, `‚úÖ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: `mamont-${info[3]}`,
            },
          ],
        ],
      }
    })
  }

  if (data === 'cancel-edit-balance') {
    bot.sendMessage(chat.id, `‚ùå –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'work',
            },
          ],
        ],
      }
    })
  }

  if (data === 'ecn') {
    return bot.sendPhoto(chat.id, `${BASE_URL}/bets.png`, {
      caption: `–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:`,
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîµ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', callback_data: 'crypt' }, { text: 'üìâ –ê–∫—Ü–∏–∏', callback_data: 'stocks' }],
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'cabinet' }]
        ],
      },
    })
  }

  if (data === 'stocks') {
    const result = generateStocksData().reduce((acc, curr, index) => {
      if (index % 2 === 0) {
        acc.push([curr]);
      } else {
        acc[acc.length - 1].push(curr);
      }
      return acc;
    }, []);

    result.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'ecn' }])

    if (user.betBlocked) {
      return bot.sendMessage(chat.id, `
‚ö† –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ç—Ä–µ–π–¥
–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - https://t.me/PoloniexExchange_Support`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'cabinet' }],
          ],
        },
      })
    }

    return bot.sendMessage(chat.id, `
üìà ECN —Å—á–µ—Ç

üí† –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:`, {
      reply_markup: {
        inline_keyboard: result
      },
    })
  }

  if (data === 'crypt') {
    const result = generateCryptoData().reduce((acc, curr, index) => {
      if (index % 2 === 0) {
        acc.push([curr]);
      } else {
        acc[acc.length - 1].push(curr);
      }
      return acc;
    }, []);

    result.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'ecn' }])



    if (user.betBlocked) {
      return bot.sendMessage(chat.id, `
‚ö† –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ç—Ä–µ–π–¥
–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - https://t.me/PoloniexExchange_Support`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'cabinet' }],
          ],
        },
      })
    }

    return bot.sendMessage(chat.id, `üåï –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:`, {
      reply_markup: {
        inline_keyboard: result
      },
    })
  }

  if (data === 'pay') {
    return bot.sendPhoto(chat.id, `${BASE_URL}/pay.png`, {
      caption: `–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É',
              callback_data: 'pay-card',
            },
          ],
          // [
          //   {
          //     text: 'ü•ù –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é QIWI',
          //     callback_data: 'pay-qiwi',
          //   },
          // ],
          [
            {
              text: 'üí± –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ BTC',
              callback_data: 'pay-btc',
            }
          ],
          [
            {
              text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
              callback_data: 'cabinet',
            },
          ],
        ],
      },
    })
  }

  if (data === 'pay-card') {
    const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });
    bot.deleteMessage(chat.id, message.message_id)


    return bot.sendPhoto(chat.id, `${BASE_URL}/pay.png`, {
      caption: `
–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π

‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${usersWorker?.deposit || 5000}‚ÇΩ

‚ö†Ô∏è –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–µ—Ä—à–∞—é—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ, —Å –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.

      –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç–æ–π —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ, —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.

üí± –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`2202203604751091\`

üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: ${user.id}

–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫,–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: [@PoloniexExchange_Support](https://t.me/PoloniexExchange_Support)`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
              callback_data: 'pay',
            },
          ],
        ],
      },
    })
  }

  if (data === 'pay-btc') {
    const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });
    bot.deleteMessage(chat.id, message.message_id)


    return bot.sendPhoto(chat.id, `${BASE_URL}/pay.png`, {
      caption: `
–û–ø–ª–∞—Ç–∞ BTC

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è BTC —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.

üí± –ê–¥—Ä–µ—Å BTC: \`bc1q5sp7lqqxyga85gj7rtry2uj9hql732w098fs5j\`

–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫, –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É [@PoloniexExchange_Support](https://t.me/PoloniexExchange_Support) –∏ –≤–∞–º –∑–∞—á–∏—Å–ª—è—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à —Å—á—ë—Ç.

‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –≤–≤–æ–¥—ã –º–µ–Ω—å—à–µ 10$ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å –Ω–µ –±—É–¥—É—Ç, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º —Ç–∞–∫ –∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
              callback_data: 'pay',
            },
          ],
        ],
      }
    })
  }

  //   if (data === 'pay-qiwi') {
  //     const usersWorker = await User.findOne({ mamonts: { $all: [user._id] } });
  //     bot.deleteMessage(chat.id, message.message_id)


  //     return bot.sendPhoto(chat.id, `${BASE_URL}/pay.png`, {
  //       caption: `
  //       –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QIWI

  // ‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${usersWorker?.deposit || 5000}‚ÇΩ

  // –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ QIWI —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ, —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.

  // üí± –ù–æ–º–µ—Ä QIWI: \`79506072262\`

  // üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: ${user.id}

  // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫,–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: [@PoloniexExchange_Support](https://t.me/PoloniexExchange_Support)`,
  //       parse_mode: 'Markdown',
  //       reply_markup: {
  //         inline_keyboard: [
  //           [
  //             {
  //               text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
  //               callback_data: 'pay',
  //             },
  //           ],
  //         ],
  //       }
  //     })
  //   }





  if (data === 'withdraw') {

    if (user.withdrawBlocked) {
      return bot.sendPhoto(chat.id, `${BASE_URL}/withdraw.png`, {
        caption: `
‚ö† –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ - https://t.me/PoloniexExchange_Support
      `,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–º–µ–Ω–∞',
                callback_data: 'cabinet',
              },
            ],
          ],
        },
      })
    }

    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-withdraw' })
    return bot.sendPhoto(chat.id, `${BASE_URL}/withdraw.png`, {
      caption: `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ${user.balance || 0} RUB`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('set-requisites-card-')) {
    const text = data.split('-')[3]
    await User.findOneAndUpdate({ id: chat.id }, { state: `set-requisites-card-${text}` })
    bot.deleteMessage(chat.id, message.message_id)

    return bot.sendMessage(chat.id, `
üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:

‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å! ‚ö†`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'cancel',
            },
          ],
        ],
      },
    })
  }

  if (data.startsWith('set-requisites-btc-')) {
    const text = data.split('-')[3]
    await User.findOneAndUpdate({ id: chat.id }, { state: `set-requisites-btc-${text}` })
    bot.deleteMessage(chat.id, message.message_id)

    return bot.sendMessage(chat.id, `
üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:

‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å! ‚ö†`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–º–µ–Ω–∞',
              callback_data: 'cancel',
            },
          ],
        ],
      },
    })
  }

  //   if (data.startsWith('set-requisites-qiwi-')) {
  //     const text = data.split('-')[3]
  //     await User.findOneAndUpdate({ id: chat.id }, { state: `set-requisites-qiwi-${text}` })
  //     bot.deleteMessage(chat.id, message.message_id)

  //     return bot.sendMessage(chat.id, `
  // ü•ù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:

  // ‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å! ‚ö†`, {
  //       reply_markup: {
  //         inline_keyboard: [
  //           [
  //             {
  //               text: '–û—Ç–º–µ–Ω–∞',
  //               callback_data: 'cancel',
  //             },
  //           ],
  //         ],
  //       },
  //     })
  //   }

  if (data === 'settings') {
    return settingsSection(chat.id, user)
  }

  if (data === 'set-name') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-name' })
    return bot.sendMessage(chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§.–ò.–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
              callback_data: 'settings-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'set-country') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-country' })
    return bot.sendMessage(chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
              callback_data: 'settings-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'set-email') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-email' })
    return bot.sendMessage(chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
              callback_data: 'settings-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'set-phone') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-phone' })
    return bot.sendMessage(chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
              callback_data: 'settings-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'set-card') {
    await User.findOneAndUpdate({ id: chat.id }, { state: 'set-card' })
    return bot.sendMessage(chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∞',
              callback_data: 'settings-cancel',
            },
          ],
        ],
      },
    })
  }

  if (data === 'info') {
    return bot.sendPhoto(chat.id, `${BASE_URL}/info.png`, {
      caption: `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîÜ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
              callback_data: 'cert',
            },
            {
              text: 'üîÜ –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞',
              callback_data: 'guarantee',
            },
          ],
          [
            {
              text: 'üîÜ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏',
              callback_data: 'network',
            },
            {
              text: 'üîÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
              url: 'https://ru.beincrypto.com/exchanges/poloniex/',
            },
          ],
          [
            {
              text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
              callback_data: 'cabinet',
            },
          ],
        ],
      },
    })
  }

  if (data === 'work-info') {
    bot.deleteMessage(chat.id, message.message_id)
    return bot.sendMessage(chat.id, `
    –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Poloniex Exchange –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Poloniex Exchange –¥–ª—è –í–û–†–ö–ï–†–û–í.`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üñ•Ô∏è –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º üë®üèª‚Äçüíª',
              url: 'https://t.me/JoghDoe',
            },
            {
              text: '‚ö°Ô∏è |–ú–ï–ù–Æ –í–û–†–ö–ï–†–ê| ‚ö°Ô∏è',
              callback_data: 'work',
            },
          ],
        ],
      },
    })
  }

  if (data === 'network') {
    return bot.sendMessage(chat.id, `
______________________________
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: |||||||||||||   50%
______________________________
–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: 2129

–ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫:
Minimum: 0.00003072 BTC / kVB
Median: 0.00004096 BTC / kVB`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'info',
            },
          ],
        ],
      },
    })
  }

  if (data === 'guarantee') {
    return bot.sendMessage(chat.id, `
üü¢Poloniex Exchange - –æ–Ω–ª–∞–π–Ω-–±–∏—Ä–∂–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.

–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –≤ –ª—é–±–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π. –ü–æ—ç—Ç–æ–º—É –Ω–∏–∫–∞–∫–∞—è –±–∏—Ä–∂–∞ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ–ª–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∏—Å–∫–æ–≤. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, Poloniex Exchange –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–≤–æ–∏—Ö —É—Å–ª—É–≥.

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å Poloniex Exchange, –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è:

üîí–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: Poloniex Exchange –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–∞—Ö, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ–º –±–∏—Ä–∂–∏.

‚öôÔ∏è–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: Poloniex Exchange –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∑–∞—â–∏—Ç—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

üåê –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: Poloniex Exchange –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∫–æ–º–∏—Å—Å–∏—è—Ö, –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å—á–µ—Ç–∞.

ü¶πüèº‚Äç‚ôÇÔ∏è –û–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: Poloniex Exchange –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º, –ø–æ–º–æ–≥–∞—è –∏–º —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.

üì≤ –£–¥–æ–±—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: Poloniex Exchange –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—É—é –∏ –ø—Ä–æ—Å—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.

‚úÖGembell Limited (–∫–æ–º–ø–∞–Ω–∏—è, –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —É—Å–ª—É–≥–∏ Poloniex Exchange —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –¶–†–û–§–† (–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ TSRF RU 0395 AA Vv0207).

–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∏–∫–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å 100%-—é –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –ü–æ—ç—Ç–æ–º—É, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –±–∏—Ä–∂–∏ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏.`, {
      caption: `üîÜ –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'info',
            },
          ],
        ],
      },
    })
  }

  if (data === 'support') {
    bot.deleteMessage(chat.id, message.message_id)

    return bot.sendPhoto(chat.id, `${BASE_URL}/support.jpg`, {
      caption: `
üõ†Ô∏è –ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã‚ùîüñ•‚ùï
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üßæ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
‚ûï –û–±—â–∞–π—Ç–µ—Å—å –≤–µ–∂–ª–∏–≤–æ, –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —Å–∏–¥–∏—Ç —Ç–∞–∫–æ–π –∂–µ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–∞–∫ –∏ –í—ã.
‚ûï –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –µ–º–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
‚ûï –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É!
‚ûï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –≤–µ–¥—ë—Ç –ø—Ä–æ–¥–∞–∂ –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤! (–¢–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤, –æ–± –æ–ø–ª–∞—Ç–µ –∏ –≤—ã–≤–æ–¥–æ–≤).
‚ûï –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É: - –Ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª —á–µ–∫ - –Ø –ø–µ—Ä–µ–≤–µ–ª, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ - –ü—Ä–∏–≤–µ—Ç(—Ç.–¥.) ‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è!

 üõ†Ô∏è –ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
      `,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ù–∞–ø–∏—Å–∞—Ç—å',
              url: 'https://t.me/PoloniexExchange_Support',
            },
            {
              text: '‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
              callback_data: 'settings',
            },
          ],
        ],
      },
    })
  }
})

function personalCabinet(chatId, user) {
  const { currentDateTimeString, createdAtDateStringString } = formateDate(
    user.createdAt
  )

  if (!user.confirmed) {
    return bot.sendMessage(chatId, `https://telegra.ph/Soglashenie-dlya-otkrytiya-ECN-02-17-2`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏',
              callback_data: 'confirm',
            },
          ],
        ],
      },
    })
  }

  const buttons = [

    [
      {
        text: 'üñ•Ô∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        callback_data: 'cabinet',
      },
    ],
    [
      {
        text: 'üìà –°—á–µ—Ç ECN',
        callback_data: 'ecn',
      },
    ],
    [
      {
        text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å',
        callback_data: 'pay',
      },
      {
        text: 'üè¶ –í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤—ã',
        callback_data: 'withdraw',
      },
    ],
    [
      {
        text: 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        callback_data: 'settings',
      },
      {
        text: '‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å',
        callback_data: 'info',
      },
    ],
    [
      {
        text: '‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        url: 'https://t.me/PoloniexExchange_Support',
      },
    ],
  ]

  if (user.isWorker) {
    buttons.unshift([
      {
        text: '‚ö°Ô∏è [–ú–ï–ù–Æ –í–û–†–ö–ï–†–ê] ‚ö°Ô∏è',
        callback_data: 'work',
      },
    ])
  }

  return bot.sendPhoto(chatId, `${BASE_URL}/cabinet.png`, {
    caption: `
üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üÜî –í–∞—à ID: ${user.id}
üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance || 0} RUB
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
Load Bitcoin: ${getRandomEmoji()}
Load Ethereum: ${getRandomEmoji()}
Load Litecoin: ${getRandomEmoji()}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üåç –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: ${user.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì™ –í–∞—à email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: ${user.card || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë§ –í–∞—à–µ –§.–ò.–û: ${user.fio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± –í–∞—à –Ω–æ–º–µ—Ä: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${generateRandomNumber(3100, 8200)}
üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ–Ω–ª–∞–π–Ω - ${generateRandomNumber(1100, 5200)}

üìù –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${currentDateTimeString}
üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${createdAtDateStringString}
  `,
    reply_markup: {
      inline_keyboard: buttons
    },
  })
}


function workerCabinet(chatId, user) {

  const buttons = [

    [
      {
        text: 'ü¶£ –ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã',
        callback_data: 'my-mamonts',
      },
      {
        text: 'ü¶£ –î–æ–±–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞',
        callback_data: 'add-mamont',
      },
    ],
    [
      {
        text: `üí≤ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –º–∞–º–æ–Ω—Ç–∞: ${user.deposit}`,
        callback_data: 'min-deposit',
      },
    ],

    [
      {
        text: '? –ò–Ω—Ñ–æ üë®üèª‚Äçüíª',
        callback_data: 'work-info',
      },
    ],
    [
      {
        text: 'üîô –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞',
        callback_data: 'cabinet',
      }
    ]
  ]

  return bot.sendMessage(chatId, `
‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞:

‚îú üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –ö–∞—Ä—Ç–∞: \`4890494760441873\`
‚îî üí≤ Bitcoin: \`bc1q5sp7lqqxyga85gj7rtpo7cg56sv32w098fs5j\`

üåê  –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–ª–∞—Ç
‚îú üí≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 80%
‚îú üí≤ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥: 75%
‚îú üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü: 70%
‚îú üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö2: 70%
‚îú üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö3: 70%
‚îú üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö4: 70%
‚îî üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö5: 70%

üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
[https://t.me/PoloniexExchange_Bot?start=${user.id}](https://t.me/PoloniexExchange_Bot?start=${user.id})`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: buttons
      },
    },
  )
}

function settingsSection(chatId, user) {
  return bot.sendPhoto(chatId, `${BASE_URL}/settings.png`, {
    caption: `
‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üåç –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: ${user.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì™ –í–∞—à email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: ${user.card || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë§ –í–∞—à–µ –§.–ò.–û: ${user.fio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± –í–∞—à –Ω–æ–º–µ—Ä: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
      `,
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§.–ò.–û',
            callback_data: 'set-name',
          },
        ],
        [
          {
            text: 'üåç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É',
            callback_data: 'set-country',
          },
          {
            text: '‚úâÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email',
            callback_data: 'set-email',
          },
        ],
        [
          {
            text: 'üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
            callback_data: 'set-phone',
          },
          {
            text: 'üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É',
            callback_data: 'set-card',
          },
        ],
        [
          {
            text: 'üõ†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            callback_data: 'support',
          },
        ],
        [
          {
            text: 'üîô –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            callback_data: 'cabinet',
          },
        ],
      ],
    },
  })
}